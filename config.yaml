# 注意规则在满足自己需求情况下，尽量做到精简，不要过度复杂，以免影响性能。
# 机场订阅
proxy-providers:
  base1:
    url: "https://freesu7.flyi.me/storage?token=tva&filename=all.yaml "
    type: http
    interval: 86400
    health-check:
      enable: true
      url: https://www.gstatic.com/generate_204
      interval: 300
    proxy: 直连

# 节点信息
proxies:
  - {name: 直连, type: direct}

# 全局配置 
port: 7890
socks-port: 7891
redir-port: 7892
mixed-port: 7893
tproxy-port: 7894
allow-lan: true
bind-address: "*"
ipv6: false
unified-delay: true
tcp-concurrent: true
log-level: warning
find-process-mode: 'off'
# interface-name: en0
global-client-fingerprint: chrome
keep-alive-idle: 600
keep-alive-interval: 15
disable-keep-alive: false
profile:
  store-selected: true
  store-fake-ip: true

# 控制面板
external-controller: 0.0.0.0:9090
secret: ""
external-ui: "/etc/mihomo/run/ui"
external-ui-name: zashboard
external-ui-url: "https://github.com/Zephyruso/zashboard/archive/refs/heads/gh-pages.zip"

# 嗅探
sniffer:
  enable: true
  sniff:
    HTTP:
      ports: [80, 8080-8880]
      override-destination: true
    TLS:
      ports: [443, 8443]
    QUIC:
      ports: [443, 8443]
  force-domain:
    - "+.v2ex.com"
  skip-domain:
    - "+.baidu.com"

# 入站  
tun:
  enable: true
  # system/gvisor/mixed
  stack: mixed
  dns-hijack: ["any:53", "tcp://any:53"]
  auto-route: true
  auto-redirect: true
  auto-detect-interface: true

# DNS模块
dns:
  enable: true
  listen: 0.0.0.0:1053
  ipv6: false
  respect-rules: true
  enhanced-mode: fake-ip
  fake-ip-range: 28.0.0.1/8
  fake-ip-filter-mode: blacklist
  fake-ip-filter:
    - "rule-set:private_domain,cn_domain"
    - "+.msftconnecttest.com"
    - "+.msftncsi.com"
    - "time.*.com"
  default-nameserver:
    - 223.5.5.5
  proxy-server-nameserver:
    - https://223.5.5.5/dns-query
  # namesever尽量用运营商提供的DNS
  nameserver:
    - 223.5.5.5
    - 119.29.29.29
 
# 出站策略
# 注意锚点必须放在引用的上方，可以集中把锚点全部放yaml的顶部。
pr: &pr {type: select, proxies: [🚀 默认代理, 🔯 香港故转, 🇭🇰 香港自动, 🇸🇬 新加坡自动, 🇺🇲 美国自动, ♻️ 自动选择, 🇭🇰 香港节点, 🇯🇵 日本节点, 🇺🇲 美国节点, 🇸🇬 新加坡节点, 🇬🇧 英国节点, 🇫🇷 法国节点, 🇩🇪 德国节点, 🇨🇦 加拿大节点, 🇦🇺 澳大利亚节点, 🇳🇱 荷兰节点, 🇷🇺 俄罗斯节点, 🇭🇺 匈牙利节点, 🇺🇦 乌克兰节点, 🇵🇱 波兰节点, 🇮🇹 意大利节点, 🇮🇷 伊朗节点, 🌐 全部节点, 直连]}
proxy-groups:
  - {name: 🚀 默认代理, type: select, proxies: [🇸🇬 新加坡自动, 🇭🇰 香港自动, 🇺🇲 美国自动, ♻️ 自动选择, 🇭🇰 香港节点, 🇯🇵 日本节点, 🇺🇲 美国节点, 🇸🇬 新加坡节点, 🇬🇧 英国节点, 🇫🇷 法国节点, 🇩🇪 德国节点, 🇨🇦 加拿大节点, 🇦🇺 澳大利亚节点, 🇳🇱 荷兰节点, 🇷🇺 俄罗斯节点, 🇭🇺 匈牙利节点, 🇺🇦 乌克兰节点, 🇵🇱 波兰节点, 🇮🇹 意大利节点, 🇮🇷 伊朗节点, 🌐 全部节点, 直连]}
  - {name: 📹 油管视频, <<: *pr}
  - {name: 🍀 Google, <<: *pr}
  - {name: 🤖 OpenAi, type: select, proxies: [🇸🇬 新加坡自动, 🇺🇲 美国自动, 🚀 默认代理, ♻️ 自动选择, 🌐 全部节点, 直连]}
  - {name: 👨🏿‍💻 GitHub, <<: *pr}
  - {name: 🐬 OneDrive, <<: *pr}
  - {name: Ⓜ️ 微软服务, <<: *pr}
  - {name: 🎵 TikTok, <<: *pr}
  - {name: 📲 电报信息, <<: *pr}
  - {name: 🎥 Netflix, type: select, proxies: [🇸🇬 新加坡自动, 🇺🇲 美国自动, 🎬 流媒体解锁, ♻️ 自动选择, 🌐 全部节点, 直连]}
  - {name: 🎥 迪士尼+, type: select, proxies: [🇸🇬 新加坡自动, 🇺🇲 美国自动, 🎬 流媒体解锁, ♻️ 自动选择, 🌐 全部节点, 直连]}
  - {name: 🎥 tvb, type: select, proxies: [直连, 🇭🇰 香港节点, 🚀 默认代理, ♻️ 自动选择, 🌐 全部节点]}
  - {name: 🎵 Spotify, <<: *pr}
  - {name: 🎬 流媒体解锁, type: select, include-all: true, filter: "(?i)流媒体|媒体|解锁"}
  - {name: ✈️ Speedtest, type: select, proxies: [直连, 🚀 默认代理, ♻️ 自动选择]}
  - {name: 💶 PayPal, type: select, proxies: [直连, 🇺🇲 美国节点, 🚀 默认代理]}
  - {name: 🍎 苹果服务, type: select, proxies: [🇸🇬 新加坡自动, 🇺🇲 美国自动, 🚀 默认代理, ♻️ 自动选择, 🌐 全部节点, 直连]}
  - {name: 📝 Notion, type: select, proxies: [🇸🇬 新加坡自动, 🇺🇲 美国自动, 🚀 默认代理, ♻️ 自动选择, 🌐 全部节点, 直连]}
  - {name: ⚡ Cloudflare, type: select, proxies: [🚀 默认代理, 🇺🇲 美国自动, 🇸🇬 新加坡自动, 🇭🇰 香港自动, ♻️ 自动选择, 🌐 全部节点, 直连]}
  - {name: 🎮 游戏, type: select, proxies: [🚀 默认代理, ♻️ 自动选择, 🌐 全部节点, 直连]}
  - {name: 🌍 国外媒体, type: select, proxies: [🚀 默认代理, ♻️ 自动选择, 🎯 直连, 🌐 全部节点]}
  - {name: 🎯 直连, type: select, proxies: [直连, 🚀 默认代理, ♻️ 自动选择]}
  - {name: 🐟 漏网之鱼, <<: *pr}
  - {name: 🇭🇰 香港节点, type: select, include-all: true, filter: "(?i)港|hk|hongkong|hong kong"}
  - {name: 🇯🇵 日本节点, type: select, include-all: true, filter: "(?i)日|jp|japan"}
  - {name: 🇺🇲 美国节点, type: select, include-all: true, filter: "(?i)美|us|unitedstates|united states"}
  - {name: 🇸🇬 新加坡节点, type: select, include-all: true, filter: "(?i)新|sg|singapore"}
  - {name: 🇬🇧 英国节点, type: select, include-all: true, filter: "(?i)英|uk|unitedkingdom|united kingdom"}
  - {name: 🇫🇷 法国节点, type: select, include-all: true, filter: "(?i)法|fr|france"}
  - {name: 🇩🇪 德国节点, type: select, include-all: true, filter: "(?i)德|de|germany"}
  - {name: 🇨🇦 加拿大节点, type: select, include-all: true, filter: "(?i)加|ca|canada"}
  - {name: 🇦🇺 澳大利亚节点, type: select, include-all: true, filter: "(?i)澳|au|australia"}
  - {name: 🇳🇱 荷兰节点, type: select, include-all: true, filter: "(?i)荷|nl|netherlands"}
  - {name: 🇷🇺 俄罗斯节点, type: select, include-all: true, filter: "(?i)俄|ru|russia"}
  - {name: 🇭🇺 匈牙利节点, type: select, include-all: true, filter: "(?i)匈|hu|hungary"}
  - {name: 🇺🇦 乌克兰节点, type: select, include-all: true, filter: "(?i)乌|ua|ukraine"}
  - {name: 🇵🇱 波兰节点, type: select, include-all: true, filter: "(?i)波|pl|poland"}
  - {name: 🇮🇹 意大利节点, type: select, include-all: true, filter: "(?i)意|it|italy"}
  - {name: 🇮🇷 伊朗节点, type: select, include-all: true, filter: "(?i)伊|ir|iran"}
  - {name: 🔯 香港故转, type: fallback, include-all: true, tolerance: 20, interval: 300, filter: "(?=.*(港|HK|(?i)Hong))^((?!(台|日|韩|新|深|美)).)*$"}
  - {name: 🇭🇰 香港自动, type: url-test, include-all: true, tolerance: 20, interval: 300, filter: "(?=.*(港|HK|(?i)Hong))^((?!(台|日|韩|新|深|美)).)*$"}
  - {name: 🇸🇬 新加坡自动, type: url-test, include-all: true, tolerance: 20, interval: 300, filter: "(?=.*(新|SG|(?i)Singapore))^((?!(港|台|日|韩|美)).)*$"}
  - {name: 🇺🇲 美国自动, type: url-test, include-all: true, tolerance: 20, interval: 300, filter: "(?=.*(美|US|(?i)States|America))^((?!(港|台|日|韩|新)).)*$"}
  - {name: ♻️ 自动选择, type: url-test, include-all: true, tolerance: 20, interval: 300, filter: "^((?!(直连)).)*$"}
  - {name: 🌐 全部节点, type: select, include-all: true}

# 规则匹配
# 此规则部分没有做防泄露处理，因为弊严重大于利！
rules:
  # 广告和隐私拦截
  - RULE-SET,reject_domains,REJECT   # 使用合并的广告拦截规则

  # 本地网络和直连规则
  - DOMAIN-SUFFIX,qichiyu.com,🚀 默认代理 # 保留原始规则
  - RULE-SET,direct_all,🎯 直连   # 使用合并的直连规则
  - RULE-SET,ArgoTunnel,🎯 直连
  - RULE-SET,ChinaDomain,🎯 直连
  - RULE-SET,ChinaCompanyIp,🎯 直连
  - RULE-SET,private_domain,🎯 直连
  - RULE-SET,cn_domain,🎯 直连
  - RULE-SET,cn_ip,🎯 直连

  # 系统服务 & 特殊应用
  - RULE-SET,apple_domains,🍎 苹果服务  # 使用apple_domains规则
  - RULE-SET,apple_domain,🍎 苹果服务  # 使用apple_domain规则
  - RULE-SET,speedtest_domain,✈️ Speedtest
  - RULE-SET,paypal_domain,💶 PayPal
  - RULE-SET,WeChat,🎯 直连 # 设为直连

  # 常用服务规则
  - RULE-SET,ai_all,🤖 OpenAi  # 使用项目合并的AI规则
  - RULE-SET,aioai,🤖 OpenAi  # 使用自定义AI规则
  - RULE-SET,github,👨🏿‍💻 GitHub  # 使用github规则
  - RULE-SET,github_domain,👨🏿‍💻 GitHub  # 使用github_domain规则
  - RULE-SET,youtube,📹 油管视频  # 使用youtube规则
  - RULE-SET,youtube_domain,📹 油管视频  # 使用youtube_domain规则
  - RULE-SET,google_domain,🍀 Google
  - RULE-SET,onedrive_domain,🐬 OneDrive
  - RULE-SET,microsoft,Ⓜ️ 微软服务  # 使用microsoft规则
  - RULE-SET,microsoft_domain,Ⓜ️ 微软服务  # 使用microsoft_domain规则
  - RULE-SET,tiktok,🎵 TikTok  # 使用tiktok规则
  - RULE-SET,tiktok_domain,🎵 TikTok  # 使用tiktok_domain规则
  - RULE-SET,telegram,📲 电报信息  # 使用telegram规则
  - RULE-SET,telegram_domain,📲 电报信息  # 使用telegram_domain规则
  - RULE-SET,netflix,🎥 Netflix  # 使用netflix规则
  - RULE-SET,netflix_domain,🎥 Netflix  # 使用netflix_domain规则
  - RULE-SET,Notion,📝 Notion
  - RULE-SET,TVB,🎥 tvb
  - RULE-SET,spotify,🎵 Spotify
  - RULE-SET,disney,🎥 迪士尼+

  # 游戏服务
  - RULE-SET,gaming,🚀 默认代理 # 使用项目合并的游戏规则

  # 代理规则 & 国际流量
  - RULE-SET,proxy_common,🚀 默认代理 # 使用proxy_common规则
  - RULE-SET,gfw_domain,🚀 默认代理
  - RULE-SET,geolocation-!cn,🚀 默认代理

  # IP 规则 (放在后面，no-resolve)
  - RULE-SET,google_ip,🍀 Google,no-resolve
  - RULE-SET,netflix_ip,🎥 Netflix,no-resolve
  - RULE-SET,telegram_ip,📲 电报信息,no-resolve

  # 最终匹配
  - MATCH,🐟 漏网之鱼

# 规则集
rule-anchor:
  ip: &ip {type: http, interval: 86400, behavior: ipcidr, format: mrs}
  domain: &domain {type: http, interval: 86400, behavior: domain, format: mrs}
  class: &class {type: http, interval: 86400, behavior: classical, format: text}
  yaml_class: &yaml_class {type: http, interval: 86400, behavior: classical, format: yaml} # yaml格式锚点
  repo_class: &repo_class {type: http, interval: 86400, behavior: classical, format: text} # 替换local_class，用于GitHub仓库规则
  
  # A本地文件锚点 - 新增用于本地文件引用
  local_ip: &local_ip {type: file, behavior: ipcidr, format: mrs}
  local_domain: &local_domain {type: file, behavior: domain, format: mrs}
  local_class: &local_class {type: file, behavior: classical, format: text}
  local_yaml: &local_yaml {type: file, behavior: classical, format: yaml}

rule-providers:
  # --- 从GitHub网络拉取规则集 ---
  # Classical格式规则
  ai_all: { <<: *class, url: https://raw.githubusercontent.com/bendusy/RulesForMe/main/rulesets/classical/ai_all.list }
  gaming: { <<: *class, url: https://raw.githubusercontent.com/bendusy/RulesForMe/main/rulesets/classical/gaming.list }
  reject_domains: { <<: *class, url: https://raw.githubusercontent.com/bendusy/RulesForMe/main/rulesets/classical/reject_domains.list }
  direct_all: { <<: *class, url: https://raw.githubusercontent.com/bendusy/RulesForMe/main/rulesets/classical/direct_all.list }
  apple_domains: { <<: *class, url: https://raw.githubusercontent.com/bendusy/RulesForMe/main/rulesets/classical/apple_domains.list }
  proxy_common: { <<: *class, url: https://raw.githubusercontent.com/bendusy/RulesForMe/main/rulesets/classical/proxy_common.list }
  telegram: { <<: *class, url: https://raw.githubusercontent.com/bendusy/RulesForMe/main/rulesets/classical/telegram.list }
  disney: { <<: *class, url: https://raw.githubusercontent.com/bendusy/RulesForMe/main/rulesets/classical/disney.list }
  github: { <<: *class, url: https://raw.githubusercontent.com/bendusy/RulesForMe/main/rulesets/classical/github.list }
  microsoft: { <<: *class, url: https://raw.githubusercontent.com/bendusy/RulesForMe/main/rulesets/classical/microsoft.list }
  netflix: { <<: *class, url: https://raw.githubusercontent.com/bendusy/RulesForMe/main/rulesets/classical/netflix.list }
  spotify: { <<: *class, url: https://raw.githubusercontent.com/bendusy/RulesForMe/main/rulesets/classical/spotify.list }
  tiktok: { <<: *class, url: https://raw.githubusercontent.com/bendusy/RulesForMe/main/rulesets/classical/tiktok.list }
  youtube: { <<: *class, url: https://raw.githubusercontent.com/bendusy/RulesForMe/main/rulesets/classical/youtube.list }

  # 自定义规则集
  WeChat: { <<: *class, url: https://raw.githubusercontent.com/bendusy/RulesForMe/main/rulesets/custom/WeChat.list }
  Notion: { <<: *class, url: https://raw.githubusercontent.com/bendusy/RulesForMe/main/rulesets/custom/notion.list }
  TVB: { <<: *class, url: https://raw.githubusercontent.com/bendusy/RulesForMe/main/rulesets/custom/tvb.list }
  ArgoTunnel: { <<: *class, url: https://raw.githubusercontent.com/bendusy/RulesForMe/main/rulesets/custom/argotunnel.list }
  aioai: { <<: *class, url: https://raw.githubusercontent.com/bendusy/RulesForMe/main/rulesets/custom/aioai.list }

  # GeoSite格式规则
  ChinaDomain: { <<: *domain, url: https://raw.githubusercontent.com/bendusy/RulesForMe/main/rulesets/geosite/ChinaDomain.list }
  private_domain: { <<: *domain, url: https://raw.githubusercontent.com/bendusy/RulesForMe/main/rulesets/geosite/private_domain.mrs }
  cn_domain: { <<: *domain, url: https://raw.githubusercontent.com/bendusy/RulesForMe/main/rulesets/geosite/cn_domain.mrs }
  geolocation-!cn: { <<: *domain, url: https://raw.githubusercontent.com/bendusy/RulesForMe/main/rulesets/geosite/geolocation-!cn.mrs }
  gfw_domain: { <<: *domain, url: https://raw.githubusercontent.com/bendusy/RulesForMe/main/rulesets/geosite/gfw_domain.mrs }
  tiktok_domain: { <<: *domain, url: https://raw.githubusercontent.com/bendusy/RulesForMe/main/rulesets/geosite/tiktok_domain.mrs }
  speedtest_domain: { <<: *domain, url: https://raw.githubusercontent.com/bendusy/RulesForMe/main/rulesets/geosite/speedtest_domain.mrs }
  apple_domain: { <<: *domain, url: https://raw.githubusercontent.com/bendusy/RulesForMe/main/rulesets/geosite/apple_domain.mrs }
  microsoft_domain: { <<: *domain, url: https://raw.githubusercontent.com/bendusy/RulesForMe/main/rulesets/geosite/microsoft_domain.mrs }
  onedrive_domain: { <<: *domain, url: https://raw.githubusercontent.com/bendusy/RulesForMe/main/rulesets/geosite/onedrive_domain.mrs }
  paypal_domain: { <<: *domain, url: https://raw.githubusercontent.com/bendusy/RulesForMe/main/rulesets/geosite/paypal_domain.mrs }
  netflix_domain: { <<: *domain, url: https://raw.githubusercontent.com/bendusy/RulesForMe/main/rulesets/geosite/netflix_domain.mrs }
  telegram_domain: { <<: *domain, url: https://raw.githubusercontent.com/bendusy/RulesForMe/main/rulesets/geosite/telegram_domain.mrs }
  github_domain: { <<: *domain, url: https://raw.githubusercontent.com/bendusy/RulesForMe/main/rulesets/geosite/github_domain.mrs }
  google_domain: { <<: *domain, url: https://raw.githubusercontent.com/bendusy/RulesForMe/main/rulesets/geosite/google_domain.mrs }
  youtube_domain: { <<: *domain, url: https://raw.githubusercontent.com/bendusy/RulesForMe/main/rulesets/geosite/youtube_domain.mrs }

  # GeoIP格式规则
  ChinaCompanyIp: { <<: *class, url: https://raw.githubusercontent.com/bendusy/RulesForMe/main/rulesets/geoip/ChinaCompanyIp.list }
  cn_ip: { <<: *ip, url: https://raw.githubusercontent.com/bendusy/RulesForMe/main/rulesets/geoip/cn_ip.mrs }
  google_ip: { <<: *ip, url: https://raw.githubusercontent.com/bendusy/RulesForMe/main/rulesets/geoip/google_ip.mrs }
  telegram_ip: { <<: *ip, url: https://raw.githubusercontent.com/bendusy/RulesForMe/main/rulesets/geoip/telegram_ip.mrs }
  netflix_ip: { <<: *ip, url: https://raw.githubusercontent.com/bendusy/RulesForMe/main/rulesets/geoip/netflix_ip.mrs }